#!/usr/bin/env ruby
require 'pathname'
require 'highline/system_extensions'
require 'optparse'
require 'open3'

xinit_file        = (Pathname(__FILE__).dirname + "xinit").expand_path
use_xephyr        = false
root_display      = ENV['DISPLAY']
$record_display   = root_display
xephyr_display    = ":5.0"
xephyr_env        = {}
xephyr_bin        = (Pathname(__FILE__).dirname + "xephyr-bin").expand_path
xephyr_path       = "#{xephyr_bin}:#{ENV['PATH']}"
$full             = false
$default_codecs   = true
$name             = "screencast"
$dirname          = Pathname("#{ENV['HOME']}/screencasts")
$thread_count     = 6
$fps              = 15
$width            = 960
$height           = 540
$x                = 950
$y                = 50
$audio_input      = "pulse"
$format           = "x11grab"
$video_codec      = "mpeg4"
$video_preset     = "lossless_ultrafast"
$audio_codec      = "pcm_s16le"
pick              = false
delay_seconds     = 0
show              = false
wait              = false

OptionParser.new do |opts|
  opts.on("-d", "--directory=PATH", "Directory for recordings") do |value|
    $dirname = Pathname(value)
  end

  opts.on("-n", "--name=NAME", "Name of recording") do |value|
    $name = value
  end

  opts.on("-f", "--[no-]full") do |value|
    $full = value
  end

  opts.on("--[no-]wait") do |value|
    wait = value
  end

  opts.on("-p", "--pick") do |value|
    pick = value
  end

  opts.on("-x=N", Integer, "Horizontal offset") do |value|
    $x = value
  end

  opts.on("-y=N", Integer, "Vertical offset") do |value|
    $y = value
  end

  opts.on("-w", "--width=PIXELS", Integer, "Recording area width") do |value|
    $width = value
  end

  opts.on("-h", "--height=PIXELS", Integer, "Recording area height") do
    |value|
    $height = value
  end

  opts.on("--xephyr", "Use X server in a window") do |value|
    use_xephyr = value
  end

  opts.on("--display=DISPLAY", String) do |value|
    xephyr_display = value
  end

  opts.on("--delay=N", "-D", "Delay N seconds", Integer) do |value|
    delay_seconds = value
  end

  opts.on("--play", "-P", "Show video after recording") do |value|
    show = value
  end

  opts.on_tail("-h", "--help") do
    puts opts
    exit
  end

end.parse!

if use_xephyr
  $x = $y = 0
  %w[DISPLAY HOME USER EDITOR VISUAL SHELL].each do |key|
    xephyr_env[key] = ENV[key]
  end
  xephyr_env["PATH"] = xephyr_path
  $record_display = xephyr_display
  xinit_command = %W[xinit #{xinit_file} -- /usr/bin/Xephyr #{$record_display} -dpi 96
    -host-cursor -screen #{$width}x#{$height}
  ]
  xinit_options = {
    :unsetenv_others => true
  }
  puts xinit_command.join(" ")
  xephyr_pid = Process.spawn(xephyr_env, *xinit_command, xinit_options)
end

def display_dimensions
  `xdpyinfo -display #{$record_display}` =~ /dimensions:\s+(\d+)x(\d+) pixels/
  [$1, $2]
end

def filename
  $dirname + Pathname("#{basename}.mp4")
end

def basename
  "#{$name}-" + Time.now.strftime("%Y%m%d-%H%M")
end

def offset
  $full ? "" : "+#{$x},#{$y}"
end

def video_input
  "#{$record_display}#{offset}"
end

def geometry
  if $full
    width, height = display_dimensions
    "#{width}x#{height}"
  else
    "#{$width}x#{$height}"
  end
end

def geometry_options
  %W[-s #{geometry}]
end

def recording_options
  %W[-f #{$format}] + geometry_options + %W[-i #{video_input} -r #{$fps}]
end

def acodec_options
  $default_codecs ? [] : %W[-acodec #{$audio_codec}]
end

def vcodec_options
  $default_codecs ? [] :
    %W[-vcodec #{$video_codec}] #  -vpre #{$video_preset}
end

def audio_options
  acodec_options + %W[-f alsa -i #{$audio_input}]
end

def video_options
  vcodec_options
end

def misc_options
  %W[-threads #{$thread_count} -strict experimental]
end

def output_options
  [filename.to_s]
end

def ffmpeg_flags
  audio_options +
  recording_options +
  video_options +
  misc_options +
  output_options
end

xephyr_flags      = %W[#{display} -ac -screen #{$width}x#{$height}]
wmctrl_flags      = %W[-r :ACTIVE: -e 0,#{$x},#{$y},#{$width},#{$height}]

unless $full
  if pick
    # Lots of screen recorders let you pick a window to record. That's
    # not very useful to me, because I want to do recordings at a known,
    # consistent geometry (e.g. 1280x720). So instead, you pick a window
    # and the script resizes it and repositions it for recording.
    puts "Pick window:"
    wmctrl_output, wmctrl_status =
      Open3.capture2e("wmctrl", *%W[-v -a :SELECT:])
    scan_results = wmctrl_output.scan(/Using window: 0x([[:xdigit:]]+)/)
    win_id = scan_results.flatten.first.to_i(16)
    system "wmctrl", *wmctrl_flags

    # ...but of course it's not that simple. Some programs will only
    # resize by certain multiples. For instance, Emacs will only
    # resize in multiples of the current character size. So now that
    # the window has resized to approximately the desired size. we
    # need to find out it's *exact* size.
    info_results, info_status =
      Open3.capture2e("xwininfo", *%W[-id #{win_id}])
    win_stats = info_results.each_line.each_with_object({}) do
      |line, stats|
      fields = line.strip.split(/:\s*/)
      stats[fields[0]] = fields[1]
    end
    $x      = win_stats["Absolute upper-left X"]
    $y      = win_stats["Absolute upper-left Y"]
    $width  = win_stats["Width"]
    $height = win_stats["Height"]
  end
end

if wait
  puts "Press <enter> to begin recording..."
  $stdin.gets
end

delay_seconds.downto(1) do |seconds_left|
  puts "Recording in #{seconds_left}..."
  sleep 1
end

puts "* ffmpeg #{ffmpeg_flags.join(' ')}"
system({"DISPLAY" => $record_display}, "ffmpeg", *ffmpeg_flags)

if xephyr_pid
  puts "Killing Xephyr"
  Process.kill("INT", xephyr_pid)
  puts "Waiting for Xephyr to die"
  Process.waitpid(xephyr_pid)
end
ENV["DISPLAY"] = root_display

if show
  system "cvlc", *%W[#{$filename.to_s} --play-and-exit]
end
